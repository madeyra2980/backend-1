# utils/car_evaluator.py
import logging
from typing import Dict, List, Any, Tuple
import numpy as np

logger = logging.getLogger(__name__)

class CarEvaluator:
    """
    –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    
    def __init__(self):
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤
        self.defect_weights = {
            "rust": 0.4,      # –†–∂–∞–≤—á–∏–Ω–∞ - –æ—á–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ
            "crack": 0.3,     # –¢—Ä–µ—â–∏–Ω—ã - —Å–µ—Ä—å–µ–∑–Ω–æ
            "dent": 0.2,      # –í–º—è—Ç–∏–Ω—ã - —Å—Ä–µ–¥–Ω–µ
            "scratch": 0.1    # –¶–∞—Ä–∞–ø–∏–Ω—ã - –º–µ–Ω–µ–µ —Å–µ—Ä—å–µ–∑–Ω–æ
        }
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        self.thresholds = {
            "excellent": 0.9,    # –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            "good": 0.7,         # –•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            "fair": 0.5,         # –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ
            "poor": 0.3,         # –ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            "critical": 0.0      # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
        self.recommendations = {
            "excellent": {
                "buy": True,
                "confidence": "high",
                "message": "üöó –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫ –ø–æ–∫—É–ø–∫–µ.",
                "details": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–µ—Ñ–µ–∫—Ç–∞–º–∏."
            },
            "good": {
                "buy": True,
                "confidence": "medium",
                "message": "‚úÖ –•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ú–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.",
                "details": "–ù–µ–±–æ–ª—å—à–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã, –Ω–æ –≤ —Ü–µ–ª–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
            },
            "fair": {
                "buy": False,
                "confidence": "medium",
                "message": "‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.",
                "details": "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–º–µ—Ç–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä."
            },
            "poor": {
                "buy": False,
                "confidence": "high",
                "message": "‚ùå –ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø–æ–∫—É–ø–∫–µ.",
                "details": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã. –í—ã—Å–æ–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–º–æ–Ω—Ç."
            },
            "critical": {
                "buy": False,
                "confidence": "high",
                "message": "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è!",
                "details": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã. –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏."
            }
        }
    
    def evaluate_car(self, detections: List[Dict[str, Any]], 
                    image_size: Tuple[int, int]) -> Dict[str, Any]:
        """
        –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤
        
        Args:
            detections: –°–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤
            image_size: –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (width, height)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ü–µ–Ω–∫–æ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_defects = len(detections)
            image_area = image_size[0] * image_size[1]
            
            if total_defects == 0:
                return self._create_excellent_rating()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–µ–∫—Ç—ã
            defect_analysis = self._analyze_defects(detections, image_area)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
            overall_score = self._calculate_overall_score(defect_analysis)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
            condition_category = self._categorize_condition(overall_score)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendation = self.recommendations[condition_category]
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            evaluation = {
                "overall_score": round(overall_score, 2),
                "condition_category": condition_category,
                "recommendation": recommendation,
                "defect_analysis": defect_analysis,
                "summary": {
                    "total_defects": total_defects,
                    "critical_defects": defect_analysis["critical_count"],
                    "defect_coverage": round(defect_analysis["coverage_percentage"], 2),
                    "severity_index": round(defect_analysis["severity_index"], 2)
                }
            }
            
            logger.info(f"–û—Ü–µ–Ω–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {condition_category} (score: {overall_score:.2f})")
            return evaluation
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {str(e)}")
            return self._create_error_rating()
    
    def _analyze_defects(self, detections: List[Dict[str, Any]], 
                        image_area: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
        defect_counts = {}
        total_severity = 0.0
        total_area = 0.0
        critical_defects = 0
        
        for detection in detections:
            class_name = detection["class"]
            confidence = detection["confidence"]
            area = detection["area"]
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ñ–µ–∫—Ç—ã –ø–æ —Ç–∏–ø–∞–º
            defect_counts[class_name] = defect_counts.get(class_name, 0) + 1
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞
            weight = self.defect_weights.get(class_name, 0.1)
            severity = confidence * weight
            total_severity += severity
            
            # –ü–ª–æ—â–∞–¥—å –¥–µ—Ñ–µ–∫—Ç–æ–≤
            total_area += area
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã (–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å + —Å–µ—Ä—å–µ–∑–Ω—ã–π —Ç–∏–ø)
            if confidence > 0.7 and class_name in ["rust", "crack"]:
                critical_defects += 1
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –¥–µ—Ñ–µ–∫—Ç–∞–º–∏
        coverage_percentage = (total_area / image_area) * 100
        
        # –ò–Ω–¥–µ–∫—Å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_index = total_severity / len(detections) if detections else 0
        
        return {
            "defect_counts": defect_counts,
            "total_severity": total_severity,
            "coverage_percentage": coverage_percentage,
            "severity_index": severity_index,
            "critical_count": critical_defects
        }
    
    def _calculate_overall_score(self, defect_analysis: Dict[str, Any]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ (0-1, –≥–¥–µ 1 = –æ—Ç–ª–∏—á–Ω–æ)"""
        base_score = 1.0
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –¥–µ—Ñ–µ–∫—Ç—ã
        severity_penalty = defect_analysis["severity_index"] * 0.4
        coverage_penalty = min(defect_analysis["coverage_percentage"] / 10, 0.3)
        critical_penalty = defect_analysis["critical_count"] * 0.2
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        final_score = base_score - severity_penalty - coverage_penalty - critical_penalty
        
        return max(0.0, min(1.0, final_score))
    
    def _categorize_condition(self, score: float) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –æ—Ü–µ–Ω–∫–µ"""
        if score >= self.thresholds["excellent"]:
            return "excellent"
        elif score >= self.thresholds["good"]:
            return "good"
        elif score >= self.thresholds["fair"]:
            return "fair"
        elif score >= self.thresholds["poor"]:
            return "poor"
        else:
            return "critical"
    
    def _create_excellent_rating(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
        return {
            "overall_score": 1.0,
            "condition_category": "excellent",
            "recommendation": self.recommendations["excellent"],
            "defect_analysis": {
                "defect_counts": {},
                "total_severity": 0.0,
                "coverage_percentage": 0.0,
                "severity_index": 0.0,
                "critical_count": 0
            },
            "summary": {
                "total_defects": 0,
                "critical_defects": 0,
                "defect_coverage": 0.0,
                "severity_index": 0.0
            }
        }
    
    def _create_error_rating(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            "overall_score": 0.0,
            "condition_category": "critical",
            "recommendation": {
                "buy": False,
                "confidence": "low",
                "message": "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.",
                "details": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            },
            "defect_analysis": {
                "defect_counts": {},
                "total_severity": 0.0,
                "coverage_percentage": 0.0,
                "severity_index": 0.0,
                "critical_count": 0
            },
            "summary": {
                "total_defects": 0,
                "critical_defects": 0,
                "defect_coverage": 0.0,
                "severity_index": 0.0
            }
        }
    
    def get_detailed_advice(self, evaluation: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞"""
        category = evaluation["condition_category"]
        summary = evaluation["summary"]
        
        advice_parts = [evaluation["recommendation"]["message"]]
        
        if summary["total_defects"] > 0:
            advice_parts.append(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            advice_parts.append(f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {summary['total_defects']}")
            advice_parts.append(f"‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {summary['critical_defects']}")
            advice_parts.append(f"‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞–º–∏: {summary['defect_coverage']}%")
            advice_parts.append(f"‚Ä¢ –ò–Ω–¥–µ–∫—Å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏: {summary['severity_index']:.2f}")
        
        if category in ["poor", "critical"]:
            advice_parts.append(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            advice_parts.append("‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä")
            advice_parts.append("‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞")
            advice_parts.append("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")
        elif category == "fair":
            advice_parts.append(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            advice_parts.append("‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä –º–µ—Ö–∞–Ω–∏–∫–∞")
            advice_parts.append("‚Ä¢ –£—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤")
        
        return "\n".join(advice_parts)


