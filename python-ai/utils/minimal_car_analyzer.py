# utils/minimal_car_analyzer.py
import cv2
import numpy as np
import logging
from typing import Dict, Any

logger = logging.getLogger(__name__)

class MinimalCarAnalyzer:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    """
    
    def __init__(self):
        pass
    
    def analyze_car_condition(self, image: np.ndarray) -> Dict[str, Any]:
        """
        –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        """
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            
            # –ê–Ω–∞–ª–∏–∑ —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            brightness = np.mean(gray)
            contrast = np.std(gray)
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ "–≥—Ä—è–∑–∏" (—Ç–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏)
            dark_threshold = np.percentile(gray, 15)
            dark_pixels = np.sum(gray < dark_threshold)
            total_pixels = image.shape[0] * image.shape[1]
            dirt_percentage = (dark_pixels / total_pixels) * 100
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π" (–∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏)
            laplacian = cv2.Laplacian(gray, cv2.CV_64F)
            laplacian = np.uint8(np.absolute(laplacian))
            damage_pixels = np.sum(laplacian > 30)
            damage_percentage = (damage_pixels / total_pixels) * 100
            
            # –û—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ—Ç—ã
            cleanliness_score = max(0, 1 - (dirt_percentage / 15))  # 15% –≥—Ä—è–∑–∏ = 0 –±–∞–ª–ª–æ–≤
            
            # –û—Ü–µ–Ω–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            integrity_score = max(0, 1 - (damage_percentage / 10))  # 10% –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π = 0 –±–∞–ª–ª–æ–≤
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            overall_score = (cleanliness_score * 0.3 + integrity_score * 0.7)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if overall_score >= 0.8:
                condition = "excellent"
                condition_name = "–û—Ç–ª–∏—á–Ω–æ–µ"
            elif overall_score >= 0.6:
                condition = "good"
                condition_name = "–•–æ—Ä–æ—à–µ–µ"
            elif overall_score >= 0.4:
                condition = "fair"
                condition_name = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
            elif overall_score >= 0.2:
                condition = "poor"
                condition_name = "–ü–ª–æ—Ö–æ–µ"
            else:
                condition = "critical"
                condition_name = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendation = self._generate_recommendation(condition, overall_score)
            
            return {
                "rust": {
                    "detected": False,
                    "percentage": 0.0,
                    "severity": 0.0,
                    "description": "–†–∂–∞–≤—á–∏–Ω–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
                },
                "scratches": {
                    "detected": damage_percentage > 2,
                    "percentage": damage_percentage,
                    "severity": min(1.0, damage_percentage / 5),
                    "description": f"–¶–∞—Ä–∞–ø–∏–Ω—ã –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: {damage_percentage:.1f}% –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"
                },
                "dents": {
                    "detected": damage_percentage > 3,
                    "percentage": damage_percentage,
                    "severity": min(1.0, damage_percentage / 8),
                    "description": f"–í–º—è—Ç–∏–Ω—ã –∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏: {damage_percentage:.1f}% –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"
                },
                "cracks": {
                    "detected": damage_percentage > 1,
                    "percentage": damage_percentage,
                    "severity": min(1.0, damage_percentage / 3),
                    "description": f"–¢—Ä–µ—â–∏–Ω—ã –∏ —Å–∫–æ–ª—ã: {damage_percentage:.1f}% –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"
                },
                "cleanliness": {
                    "score": cleanliness_score,
                    "brightness": brightness,
                    "contrast": contrast,
                    "dirt_percentage": dirt_percentage,
                    "is_clean": cleanliness_score > 0.7,
                    "description": f"–ß–∏—Å—Ç–æ—Ç–∞: {cleanliness_score:.1%} (–≥—Ä—è–∑—å: {dirt_percentage:.1f}%)"
                },
                "overall_condition": {
                    "score": overall_score,
                    "condition": condition,
                    "condition_name": condition_name,
                    "damage_score": 1 - integrity_score,
                    "cleanliness_score": cleanliness_score,
                    "description": f"{condition_name} —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –û—Ü–µ–Ω–∫–∞: {overall_score:.1%}"
                },
                "recommendation": recommendation
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {str(e)}")
            return self._create_error_analysis()
    
    def _generate_recommendation(self, condition: str, overall_score: float) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
        driver_messages = {
            "excellent": {
                "message": "üöó –û—Ç–ª–∏—á–Ω–∞—è –º–∞—à–∏–Ω–∞!",
                "details": "–ú–∞—à–∏–Ω–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–µ–π! üòä",
                "emoji": "üòä"
            },
            "good": {
                "message": "‚úÖ –•–æ—Ä–æ—à–∞—è –º–∞—à–∏–Ω–∞!",
                "details": "–ú–∞—à–∏–Ω–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã. –°—Ç–æ–∏—Ç –ø–æ–¥—É–º–∞—Ç—å –æ —Ä–µ–º–æ–Ω—Ç–µ! üëç",
                "emoji": "üëç"
            },
            "fair": {
                "message": "‚ö†Ô∏è –ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç!",
                "details": "–ú–∞—à–∏–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É! üîß",
                "emoji": "üîß"
            },
            "poor": {
                "message": "‚ùå –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã!",
                "details": "–ú–∞—à–∏–Ω–∞ –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ù—É–∂–µ–Ω —Å—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç! üö®",
                "emoji": "üö®"
            },
            "critical": {
                "message": "üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!",
                "details": "–ú–∞—à–∏–Ω–∞ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –õ—É—á—à–µ –Ω–µ –µ–∑–¥–∏—Ç—å! üò±",
                "emoji": "üò±"
            }
        }
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
        passenger_messages = {
            "excellent": {
                "message": "üëë –ü—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å!",
                "details": "–û—Ç–ª–∏—á–Ω–∞—è –º–∞—à–∏–Ω–∞! –°–∞–¥–∏—Ç–µ—Å—å —Å–º–µ–ª–æ! üòâ",
                "emoji": "üëë"
            },
            "good": {
                "message": "‚úÖ –•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä!",
                "details": "–ù–µ–ø–ª–æ—Ö–∞—è –º–∞—à–∏–Ω–∞, –º–æ–∂–Ω–æ –µ—Ö–∞—Ç—å! üòä",
                "emoji": "üòä"
            },
            "fair": {
                "message": "‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ!",
                "details": "–ú–∞—à–∏–Ω–∞ –Ω–µ –≤ –ª—É—á—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –¥–æ–µ–¥–µ—Ç–µ! üôÉ",
                "emoji": "üôÉ"
            },
            "poor": {
                "message": "üêê –†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ!",
                "details": "–ú–∞—à–∏–Ω–∞ –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! üò¨",
                "emoji": "üò¨"
            },
            "critical": {
                "message": "üíÄ –û–ø–∞—Å–Ω–æ –¥–ª—è –∂–∏–∑–Ω–∏!",
                "details": "–õ—É—á—à–µ –Ω–µ —Å–∞–¥–∏—Ç—å—Å—è! –ú–∞—à–∏–Ω–∞ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! üò±",
                "emoji": "üò±"
            }
        }
        
        driver_msg = driver_messages[condition]
        passenger_msg = passenger_messages[condition]
        
        return {
            "driver": driver_msg,
            "passenger": passenger_msg,
            "overall_condition": condition,
            "score": overall_score
        }
    
    def _create_error_analysis(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            "rust": {"detected": False, "percentage": 0, "severity": 0, "description": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"},
            "scratches": {"detected": False, "percentage": 0, "severity": 0, "description": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"},
            "dents": {"detected": False, "percentage": 0, "severity": 0, "description": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"},
            "cracks": {"detected": False, "percentage": 0, "severity": 0, "description": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"},
            "cleanliness": {"score": 0, "is_clean": False, "description": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"},
            "overall_condition": {"score": 0, "condition": "critical", "description": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"},
            "recommendation": {
                "driver": {"message": "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", "details": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "emoji": "‚ùå"},
                "passenger": {"message": "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", "details": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "emoji": "‚ùå"}
            }
        }
